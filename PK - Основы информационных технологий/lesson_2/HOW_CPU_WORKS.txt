RISK - Мобильные устройства
CISC - Проессоры ПК

https://sonikelf.ru/taktovaya-chastota-ili-kolichestvo-yader-chto-vybrat/

Тактовоя частота процессора - это количество операций в секунду.
Чем выше частота, тем больше действий процессор за один проход.
Это как с перевозкой груза: чем быстрее Вы едете, тем раньше
привезете товар к месту назначения. Других вариентов нет.

Что важнее для игр, - многоядерность процессора или его тактовая частота?
Что вообще, по сути, есть частота, а что много ядер и какую роль всё это играет?

Сказать однозначно, что важнее, частота процессора - это количество операций в секундеу
Чем выше частота, тем больше действий процессор за один проход. Это как с перевозкой
груза: чем быстрее Вы едете, тем раньше привезете товар к месту назначения.
Других вариантов нет. Если взять два одинаковых процессора, но с разными частотами,
то можно гарантировать, что быстрее будет именно тот, у которого выше частота работы.

С многоядерностью сложнее. Два ядра могут обсчитывать одновременно несколько задач. 
И в идеале работать они будут значительно быстрее одноядерного решения. 
Но тут всё зависит от самой программы или игры: может ли она разделить поставленную задачу
на несколько простых действий и загрузить ими оба ядра? Если программа не может разбить
задачу на части, то работать будет только одно ядро и скорость будет зависеть только
от его частоты.

Помимо частот и количества ядре, есть еще один немаловажный фактор, - архитектура процессора.
Собственно, это то, как процессор оперирует полученными данными.
Чем рациональнее используются его ресурсы, тем быстрее он будет работать. Именно поэтому,
к примеру, процессоры Intel в одинаковых условиях зачастую оказываются быстрее решений от AMD.

Теперь, понимая, на что влияют основные характериски процессора, можно 
поговорить о том, какая из них важнее именно для Вас. Многоядерность помогает
при конвертации видео, работе с аудио, рендеринге картинок в 3RDS Max. Это
простые процессы, которые всегда можно разделить на составляющие и после 
обсчёта собрать вместе. С играми всё гораздо сложнее, тут как попадете. 
Кто-то из разработчиков занимается распараллеливанием задач в коде игр, а кто-то нет.
Но тенденция <<больше ядер - быстрее игра>> всё же прослеживается. 
Отчетливо это видно при сравнении старых игр с новыми. К примеру, Crysis, 
игра трехлетней давности, на двухъядерном процессором 4.5ГГц работает значительно
быстрее, чем на четырезядерно, но с 2,6ГГц. Однако не стоит срываться с места и бежать за 
четырезьядерным процессором. Перед покупкой необходимо учесть множество других факторов,
главный из которых - видеокарта. В играх процессоры раскрываются только тогда, когда
графику обрабатывает мощная плата, к примеру, GTX 480 или Radeon HD5870.
Если же за графику будет отвечать что-нибудь бюджетное, то разницы между теми
же Core i3 и Corei7 можно просто не почувствовать, т;к; производительность
в этом случае упрется в видеокарту.

https://tproger.ru/explain/how-cpu-works

## Два основных компонетнта процесора:
#   - устройство управления;
#   - аримфметико-логическое устройства;

Устройство управления (УУ) помогает процессору контролировать и выполнять инструкции.
УУ сообщает компонентам, что именно нужно делать. В соответствии с инструкциями он
координирует работу с другими частями компьютера, включая второй основной компонент
-- аримфметико-логическое устройство (АЛУ). Все инструкции вначале поступают именно
на устройство управления.

Существует два типа реализации УУ (устройства управления):
  - на жёсткой логике (анг hardwired control units). Характер работы определяется 
    внутренним электрическим строением - устройством печатной платы или кристала. 
    Соответсвенно, модификация такого УУ без физического вмешательства невозможна.

  - с микропрограммным управлением (англ. microprogrammable control units).
    Может быть запрограммирован для тех или иных целей. 
    Программная часть сохраняется в памяти УУ.

УУ на жёсткой логике быстрее, но УУ с микропрограммным управлением обладает 
более гибкой функциональностью.

## Аримфметико-логическое устройство

Это устройство, как ни странно, выполняет все арифметические и логические операции,
например сложение, вычитание, логическое ИЛИ и т.п. АЛУ состоит 
из логических элементов, которые и выполняют эти операции.

https://tproger.ru/explain/how-cpu-works   <--- тут картинки схем

Хранение информации - регистры и память

Как говорилось ранее, процессор выполняет поступающие на него команды.
Команды в большинстве случаев работают с данными, которые могут быть
промежуточными, входными или выходными. Все эти данные вместе с 
инструкциями сохраняются в регистрах и памяти.

## Регистры

* Регистр - минимальная ячейка памяти данных. Регистры состоят из
триггеров (англ. latches/flip-flops). Триггеры, в свою очередь, 
состоят из логических элементов и могут хранить в себе 1 бит информации. *

Триггеры могут быть синхронные и асинхронные. Асинхронные могут
менять своё состояние в любой момент, а синхронные только во время
положительного/отрицательного перепада на входе синхронизации.


#### TODO: ПРОВЕРИТЬ ЭТУ ЧАСТИ НА ПРИМЕРЕ ДЕТАЛЕЙ/КОНТРЛЛЕРОВ АРДУИНО

По функциональному назначению триггеры делятся на несколько групп:

- RS-триггер: сохраняет своё состояние при нулевых уровнях на обоих входах 
  и изменяет его при установке единицы на одном из входов (Reset/Set) -- Сброс/Установка).

- JK-триггер: идентичен RS-триггеру за исключением того,
  что при подаче единиц сразу на два входа триггер меняет своё состояние на
  противоположное (счётный режим).

- T-триггер: меняет своё состояние на противоположное при каждом такте 
  на его единственном входе.

- D-триггер: запоминает состояние на входе в момент синхронизации.
  Асинхронные D-триггеры смысла не имеют.

Для хранения промежуточных данных ОЗУ не подходит, т.к. это замедлит работу процессора.
Промежуточные данные отсылаются в регистры по шине.
В них могут храниться команды, выходные данные и даже адреса ячеек памяти.

## Память (ОЗУ)

ОЗУ (оперативное запоминающее устройство, англ. RAM) - это большая группа этих самых регистров,
соединённых вместе. Память у такого хранилища непостоянная и данные оттуда 
пропадают при отключении питания. ОЗУ принимает адрес ячейки памяти, 
в которую нужно поместить данные, сами данные и флаг записи/чтения, 
который приводит в действие триггеры.

Оперативная память бывает статической и динамической -- SRAM и DRAM соответсвенно.
В статической памяти ячейками являются триггеры. а в динамической - конденсаторы.
SRAM быстрее, а DRAM дешевле.

## Команды (инструкции)

Команды - это фактические действия, которыекомпьютер должен выполнять.
Они бывают нескольких типов:

- Арифметические: сложение, вычитание, умножение и т.д.
- Логические: И (логическое умножение/коньюкция), ИЛИ (логическое суммирование/дизьюнкция)
дизъюнкция (логическая операция, по своему применению масимально приближенная к союзу или в смысле или то или это, или оба сразу)
- Информационные: move, input, output, load и store
- Команды перехода: goto, if ... goto, call и return
- Команда останова: halt

На самом деле все арифметические операции в АЛУ могут быть созданы на 
основе всего двух: сложение и сдвиг. Однако чем больше базовых операций 
поддерживает АЛУ, тем оно быстрее.

Инструкции предоставляются компьютеру на языке ассемблера или генерируются
компилятором высокроуровневых языков.

В процессоре инструкции реализуются на аппаратном уровне.
За один такс одноядерный процессор может выполнить одну
элеметарную (базовую) инструкцию.

Группу инструкций принято называть набором команд (англ. instruction set).


## Тактирование процессора

Быстродействие компьютера определяется тактовой частотой
его процессора. Тактовая частота - количествл тактов
(соответсвенно и исполняемых команд) за секунду.

Чтобы уменьшить время выполнения программы, нужно либо
оптимизировать (уменьшить) её, либо увеличить тактовую
частоту. У части процессоров есть возможность увеличить частоту
(разогнать процессор), однако такие действия физически влияют на процессор
и нередко вызывают перегрев и выход из строя.

## Выполнение инструкций

Инструкции хранятся в ОЗУ в последовательном порядке. 
Для гипотетического процессора инструкция состоит из 
кода операции и адреса памяти/регистра. Внутри управлющего
устройства есть два регистра инструкций, в которые загружается код команды
и адрес текущей исполяемой команды. Ещё в процессоре есть дополнительные
регистры, которые хранят в себе последние 4 бита выполненных инструкций.

Ниже рассмотрен пример набора команд, который суммирует два числа:

1. LOAD_A 8. Это команда сохраняет в ОЗУ данные, скажем,
<1100 1000>. Первые 4 бита - код операции. 
Именно он определяет инструкцию УУ. 
Команда декодируется в инструкцию load_A -поместить данные 1000 (последние 4
бита команды) в регист А.

2. LOAD_B 2. Ситуация, аналогичная прошлой. Здесть 
помещается число 2(0010) в регистр В.

3. ADD B A. Команда суммирует два числа (точнее прибавляет
значение регистра В в регистр А). УУ сообщает АЛУ, что
нужно выполнить операцию суммирования и поместить 
результат обратно в регистр А.

4. STORE_A 23. Сохраняем значение регистра А в ячейку памяти с адресом 23.

Вот такие операции нужны, чтобы сложить два числа.

## Шина


Шина данных - часть системной шины, предназначенная для передачи данных 
между компонентами компьютера, по которой передаются сигналы, определяющие
характер обмена информацией по магистрали. Сигналы управления определяют, 
какую опреацию (считывание или запись информации из памяти) нужно производить,
синхронизируют обмен информацией между устройствами.По шине данных передается вся информация. 
При операции записи информацию на неё выставляет процессор, а считывает то устройство
(например, память или принтер), адрес которого выставлен на шине адреса. При операции 
чтения информацию выставляет устройство, адрес которого выстален на шине 
адреса, а считывает процессор.